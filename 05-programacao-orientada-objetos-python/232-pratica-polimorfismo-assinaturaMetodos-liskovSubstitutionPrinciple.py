# Polimorfismo em Python Orientado a Objetos

# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.

# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)

# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID

# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.

# Sobrecarga de m√©todos (overload)  üêç = ‚ùå -- python nao da suporte a sobrecarga de metodos

# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ -- python da suporte a sobreposicao de metodos

from abc import ABC, abstractmethod # importando o abstractmethod para que possa ser usado


# a classe Notificacao √© abstrata caracterizada pelo (ABC), nao pode ser instanciada
class Notificacao(ABC):
    def __init__(self, mensagem):
        self.mensagem = mensagem

    # o metodo enviar √© abstrato entao ele tera que ser implementado nas subclasses
    @abstractmethod
    def enviar(self) -> bool: ...


class NotificacaoEmail(Notificacao):
    # -> bool (type annotation ou type hinting), apenas para fazer acompanhamento da "assinatura" do metodo ou retorno
    def enviar(self) -> bool: 
        print('E-mail: enviando - ', self.mensagem)
        return True


class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool:
        print('SMS: enviando - ', self.mensagem)
        return False


# est√° especificando que o argumento 'notificacao' tem que ser do tipo Notificacao(classe)
# Ex: def notificar(notificacao: int) ou def notificar(notificacao: str)
def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o N√ÉO enviada')


notificacao_email = NotificacaoEmail('testando e-mail')
notificar(notificacao_email)

notificacao_sms = NotificacaoSMS('testando SMS')
notificar(notificacao_sms)



# passagem de parametro errada nao quebra o aplicativo, continua normalmente
def exemploTeste(numero: int):
    print(numero)

exemploTeste('cachorro')